apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: execute-remote-pipeline
spec:
  params:
    - description: Name of the pipeline to execute
      name: pipeline-name
      type: string
    - description: Which namespace is the pipeline located in?
      name: pipeline-namespace
      type: string
    - description: URL of the remote OpenShift API server
      name: openshift-server-url
      type: string
    - description: Name of the secret holding the authentication token
      name: openshift-token-secret
      type: string
    - description: deployment name
      name: APP_NAME
      type: string
    - description: git repo
      name: url
      type: string
    - description: git revision
      name: revision
      type: string
  steps:
  - name: execute-remote-pipeline-step
    command:
    - /bin/bash
    args:
    - -c
    - |
      set -e

      if [ -z "$OPENSHIFT_TOKEN" ]; then
        echo OPENSHIFT_TOKEN is empty
        exit 1
      fi

      oc login \
        --token "$OPENSHIFT_TOKEN" \
        "$(params.openshift-server-url)"

      PIPELINERUN=$(
        tkn pipeline start \
              --namespace $(params.pipeline-namespace) \
              $(params.pipeline-name) -w name=shared-workspace,claimName=source-pvc -p deployment-name=$(params.APP_NAME) -p git-url=$(params.url) -p git-revision=$(params.revision) -p IMAGE=image-registry.openshift-image-registry.svc:5000/$(params.pipeline-namespace)/$(params.APP_NAME) --use-param-defaults \
              | sed --quiet 's/Pipelinerun started: \(.*\)/\1/p'
      )

      tkn pipelinerun logs \
        --namespace $(params.pipeline-namespace) \
        --follow "$PIPELINERUN"

      STATUS=$(
        oc get pipelinerun \
          --namespace $(params.pipeline-namespace) \
          "$PIPELINERUN" \
          --output jsonpath='{.status.conditions[?(@.type=="Succeeded")].status}'
      )

      if [ "$STATUS" != True ]; then
        echo "Remote pipeline failed:"
        oc get pipelinerun \
          --namespace $(params.pipeline-namespace) \
          "$PIPELINERUN" \
          --output jsonpath='{.status.conditions[?(@.type=="Succeeded")].message}'
        exit 1
      fi
    image: quay.io/noseka1/execute-remote-pipeline:latest
    env:
    - name: OPENSHIFT_TOKEN
      valueFrom:
        secretKeyRef:
          name: $(params.openshift-token-secret)
          key: openshift-token
